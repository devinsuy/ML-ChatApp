Summary:

	- Deployment:
		- Google Cloud App Engine webserver for our project 

	- Front End:
		- ReactJS

	- Back End:
		- Python 

		- Modules:
			- Both models will define a function:
				predict(text: str) -> bool

			- Deep Neural Network Model
				- Architecture implemented and trained in Keras

			- Naive Bayes Model
				- Trained with sklearn

		- Server:
			- REST architecture that will support two endpoints:

			/api/predict/DeepNeuralNet
			/api/predict/NaiveBayes


	- Example Flow of Control
		1. Client browser loads webpage 

		2. Client browser loads modified chat app UI

		3. User enters into message box text: "I had a bad day today, everything is going wrong for me."

		4. User presses send button

		5. React UI makes a HTTP request to the our backend api endpoint to the 
			```
			URL:
				POST /api/predict/DeepNeuralNet 		
				POST /api/predict/NaiveBayes 		
			Header:
				Content-Type: application/json
			Request Body:
				{
					"text" : "I had a bad day today, everything is going wrong for me."
				}
			```

		6. API receives and routes request to the appropriate ML model

		7. ML model receives the text and calls predict(text: str) -> bool

		8. predict() analyses the text and outputs a probabiltiy value 

		9. Probability value determines { positive, negative } classification

		10. API generates and serves HTTP response to the fufill the request
			Header:
				Content-Type: application/json
			Response Body:
				{
					"Sentiment" : "negative"
				}
			```

		11. Repeat starting from step #3 until client leaves webpage
