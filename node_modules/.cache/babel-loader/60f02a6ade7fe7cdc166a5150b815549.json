{"ast":null,"code":"var _jsxFileName = \"/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'; // Componenents\n\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  console.log(useParams());\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n    setMessages(messages => [...messages, message]);\n    console.log(message);\n  }; // Check the users list to see if the bots have been added yet\n\n\n  const usersArr = Array.from(users);\n  const foundDNN = usersArr.some(el => el.name === \"DNN Bot\");\n  const foundNB = usersArr.some(el => el.name === \"Naive Bayes Bot\"); // Add the bots only if they havent been added previously and there is atleast 1 user in the room\n\n  if (!foundNB && usersArr.length > 0) users.push({\n    id: usersArr[0].id,\n    name: \"Naive Bayes Bot\",\n    room: users[0].room\n  });\n  if (!foundDNN && usersArr.length > 0) users.push({\n    id: usersArr[0].id,\n    name: \"DNN Bot\",\n    room: users[0].room\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"GhnRe+u1Z687bJQck+Z2VGTwWYw=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","useHistory","useParams","TextContainer","Messages","InfoBar","Input","Chat","location","console","log","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","sendMessage","event","preventDefault","usersArr","Array","from","foundDNN","some","el","name","foundNB","length","push","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'\n\n// Componenents\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\n\nconst Chat = ({ location }) => {\n  console.log(useParams());\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    setMessages(messages => [ ...messages, message ]);\n    console.log(message)\n  }\n\n  // Check the users list to see if the bots have been added yet\n  const usersArr = Array.from(users)\n  const foundDNN = usersArr.some(el => el.name === \"DNN Bot\");\n  const foundNB = usersArr.some(el => el.name === \"Naive Bayes Bot\");\n  \n  // Add the bots only if they havent been added previously and there is atleast 1 user in the room\n  if(!foundNB && usersArr.length > 0)\n    users.push({id: usersArr[0].id, name: \"Naive Bayes Bot\", room: users[0].room})\n  if(!foundDNN && usersArr.length > 0)\n    users.push({id: usersArr[0].id, name: \"DNN Bot\", room: users[0].room})\n\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}