{"ast":null,"code":"var _jsxFileName = \"/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'; // Componenents\n\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport './Chat.css'; // REST API endpoints to Python ML server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"c55f8d138f6ccfd43612b15c98706943e1f4bea3\";\nconst urlNB = `/api/predict/NB&apikey=${apikey}`;\nconst urlDNN = `/api/predict/DNN&apikey=${apikey}`;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  // ----------------------------------- Initialization -----------------------------------\n  // TODO: Create a array of different thinking responses and score responses\n  //       bots should randomly select from this array for variation\n  // Init bots\n  let NB = {\n    name: \"Naive Bayes Bot\",\n    score: -1,\n    thinking: \"Let me think about that . . .\",\n    scoreMsg: \"Here's what I think about the sentiment score for your message: \"\n  };\n  let DNN = {\n    name: \"DNN Bot\",\n    score: -1,\n    thinking: \"Give me a second . . .\",\n    scoreMsg: \"I give your message a sentiment score of: \"\n  }; // Read name from URL on init\n\n  const name = window.location.search.split('=')[1];\n  const [users, setUsers] = useState([{\n    name: name\n  }, {\n    name: NB.name\n  }, {\n    name: DNN.name\n  }]); // Stateful message rendering\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]); // Request headers for API call to ML server for predictions\n\n  let params = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"Message\": message\n    })\n  }; // ----------------------------------- Messaging Functions -----------------------------------\n  // Render the message to screen\n\n  const sendMessage = (name, msg) => {\n    let currMsg = {\n      user: name,\n      text: msg\n    };\n    setMessages(prevMsgs => [...prevMsgs, currMsg]);\n  }; // Generate a random delay between messages the bots send\n\n\n  const getDelay = () => {\n    return Math.floor(Math.random() * (1100 - 1500)) + 1500;\n  }; // Retrieve NB sentiment prediction from server for the user sent text\n\n\n  const getScoreNB = async () => {\n    await fetch(urlNB, params).then(response => response.json()).then(scoreData => {\n      NB.score = scoreData.Score;\n    }).catch(err => {\n      console.log(err);\n    });\n  }; // Retrieve DNN sentiment prediction from server for the user sent text\n\n\n  const getScoreDNN = async () => {\n    await fetch(urlDNN, params).then(response => response.json()).then(scoreData => {\n      DNN.score = scoreData.Score;\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const respondNB = async userMsg => {// await(setTimeout(function() { sendMessage(NB.name, NB.thinking) }, getDelay()));            // Send thinking message\n    // await(sendMessage(NB.name, \"You sent: \" + userMsg));\n    // // getScoreNB()                                                                      // Retrieve the NB sentiment score\n    // await(sendMessage(NB.name, NB.scoreMsg + NB.score));\n  };\n\n  const respondDNN = userMsg => {\n    // Send thinking message\n    let thinkDelay = getDelay();\n    let repeatDelay = thinkDelay + getDelay();\n    let scoreDelay = repeatDelay + getDelay();\n    setTimeout(function () {\n      sendMessage(DNN.name, DNN.thinking);\n    }, thinkDelay);\n    setTimeout(function () {\n      sendMessage(DNN.name, \"You sent: \" + userMsg);\n    }, repeatDelay);\n    setTimeout(function () {\n      sendMessage(DNN.name, DNN.scoreMsg + DNN.score);\n    }, scoreDelay);\n  };\n\n  const handleMessage = event => {\n    event.preventDefault(); // Render user message\n\n    let userMsg = message;\n    sendMessage(name, message);\n    setMessage(''); // Randomly alternate which bot responds to the message first\n\n    if (Math.random() < 0.5) {\n      respondNB(userMsg);\n      setTimeout(function () {\n        respondDNN();\n      }, getDelay());\n    } else {\n      respondDNN(userMsg);\n      setTimeout(function () {\n        respondNB();\n      }, getDelay());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: \"SA Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: handleMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"hhHQ4lPi3OQgDOWgIR/Yk38Pjv8=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","useHistory","useParams","TextContainer","Messages","InfoBar","Input","apikey","urlNB","urlDNN","Chat","location","NB","name","score","thinking","scoreMsg","DNN","window","search","split","users","setUsers","message","setMessage","messages","setMessages","params","method","headers","body","JSON","stringify","sendMessage","msg","currMsg","user","text","prevMsgs","getDelay","Math","floor","random","getScoreNB","fetch","then","response","json","scoreData","Score","catch","err","console","log","getScoreDNN","respondNB","userMsg","respondDNN","thinkDelay","repeatDelay","scoreDelay","setTimeout","handleMessage","event","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,YAAP,C,CAEA;;;AACA,MAAMC,MAAM,GAAG,0CAAf;AACA,MAAMC,KAAK,GAAI,0BAAyBD,MAAO,EAA/C;AACA,MAAME,MAAM,GAAI,2BAA0BF,MAAO,EAAjD;;AAEA,MAAMG,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC7B;AACA;AACA;AACA;AACA,MAAIC,EAAE,GAAG;AACPC,IAAAA,IAAI,EAAE,iBADC;AACkBC,IAAAA,KAAK,EAAE,CAAC,CAD1B;AAEPC,IAAAA,QAAQ,EAAE,+BAFH;AAGPC,IAAAA,QAAQ,EAAE;AAHH,GAAT;AAKA,MAAIC,GAAG,GAAG;AACRJ,IAAAA,IAAI,EAAE,SADE;AACSC,IAAAA,KAAK,EAAE,CAAC,CADjB;AAERC,IAAAA,QAAQ,EAAE,wBAFF;AAGRC,IAAAA,QAAQ,EAAE;AAHF,GAAV,CAV6B,CAgB7B;;AACA,QAAMH,IAAI,GAAGK,MAAM,CAACP,QAAP,CAAgBQ,MAAhB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAb;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,CACjC;AAAEc,IAAAA,IAAI,EAAEA;AAAR,GADiC,EACjB;AAAEA,IAAAA,IAAI,EAAED,EAAE,CAACC;AAAX,GADiB,EACE;AAAEA,IAAAA,IAAI,EAAEI,GAAG,CAACJ;AAAZ,GADF,CAAD,CAAlC,CAlB6B,CAsB7B;;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,EAAD,CAAxC,CAxB6B,CA0B7B;;AACA,MAAI4B,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFE;AAGXC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE,iBAAYT;AAAd,KAAf;AAHK,GAAb,CA3B6B,CAiC7B;AACA;;AACA,QAAMU,WAAW,GAAG,CAACpB,IAAD,EAAOqB,GAAP,KAAe;AACjC,QAAIC,OAAO,GAAG;AAAEC,MAAAA,IAAI,EAAEvB,IAAR;AAAcwB,MAAAA,IAAI,EAAEH;AAApB,KAAd;AACAR,IAAAA,WAAW,CAACY,QAAQ,IAAK,CAAE,GAAGA,QAAL,EAAeH,OAAf,CAAd,CAAX;AACD,GAHD,CAnC6B,CAwC7B;;;AACA,QAAMI,QAAQ,GAAG,MAAM;AAAE,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,OAAO,IAAxB,CAAX,IAA6C,IAApD;AAA0D,GAAnF,CAzC6B,CA2C7B;;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC7B,UACEC,KAAK,CAACpC,KAAD,EAAQmB,MAAR,CAAL,CACCkB,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOG,SAAD,IAAe;AAAEpC,MAAAA,EAAE,CAACE,KAAH,GAAWkC,SAAS,CAACC,KAArB;AAA2B,KAFlD,CADG,CAIFC,KAJE,CAIKC,GAAD,IAAS;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAmB,KAJlC,CAAL;AAKD,GAND,CA5C6B,CAmD7B;;;AACA,QAAMG,WAAW,GAAG,YAAW;AAC7B,UACEV,KAAK,CAACnC,MAAD,EAASkB,MAAT,CAAL,CACCkB,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOG,SAAD,IAAe;AAAE/B,MAAAA,GAAG,CAACH,KAAJ,GAAYkC,SAAS,CAACC,KAAtB;AAA4B,KAFnD,CADG,CAIFC,KAJE,CAIKC,GAAD,IAAS;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAmB,KAJlC,CAAL;AAKD,GAND;;AAQA,QAAMI,SAAS,GAAG,MAAOC,OAAP,IAAmB,CACnC;AACA;AACA;AACA;AACD,GALD;;AAOA,QAAMC,UAAU,GAAID,OAAD,IAAa;AAC9B;AACA,QAAIE,UAAU,GAAGnB,QAAQ,EAAzB;AACA,QAAIoB,WAAW,GAAGD,UAAU,GAAGnB,QAAQ,EAAvC;AACA,QAAIqB,UAAU,GAAGD,WAAW,GAAGpB,QAAQ,EAAvC;AACAsB,IAAAA,UAAU,CAAC,YAAW;AAAE5B,MAAAA,WAAW,CAAChB,GAAG,CAACJ,IAAL,EAAWI,GAAG,CAACF,QAAf,CAAX;AAAqC,KAAnD,EAAqD2C,UAArD,CAAV;AACAG,IAAAA,UAAU,CAAC,YAAW;AAAE5B,MAAAA,WAAW,CAAChB,GAAG,CAACJ,IAAL,EAAW,eAAe2C,OAA1B,CAAX;AAA+C,KAA7D,EAA+DG,WAA/D,CAAV;AACAE,IAAAA,UAAU,CAAC,YAAW;AAAE5B,MAAAA,WAAW,CAAChB,GAAG,CAACJ,IAAL,EAAWI,GAAG,CAACD,QAAJ,GAAeC,GAAG,CAACH,KAA9B,CAAX;AAAiD,KAA/D,EAAiE8C,UAAjE,CAAV;AAED,GATD;;AAWA,QAAME,aAAa,GAAIC,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACC,cAAN,GAD+B,CAE/B;;AACA,QAAIR,OAAO,GAAGjC,OAAd;AACAU,IAAAA,WAAW,CAACpB,IAAD,EAAOU,OAAP,CAAX;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV,CAL+B,CAO/B;;AACA,QAAGgB,IAAI,CAACE,MAAL,KAAgB,GAAnB,EAAuB;AACrBa,MAAAA,SAAS,CAACC,OAAD,CAAT;AACAK,MAAAA,UAAU,CAAC,YAAW;AAAEJ,QAAAA,UAAU;AAAI,OAA5B,EAA8BlB,QAAQ,EAAtC,CAAV;AACD,KAHD,MAII;AACFkB,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAK,MAAAA,UAAU,CAAC,YAAW;AAAEN,QAAAA,SAAS;AAAI,OAA3B,EAA6BhB,QAAQ,EAArC,CAAV;AACD;AACF,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEd,QAApB;AAA8B,QAAA,IAAI,EAAEZ;AAApC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEU,OAAhB;AAAyB,QAAA,UAAU,EAAEC,UAArC;AAAiD,QAAA,WAAW,EAAEsC;AAA9D;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEzC;AAAtB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA1GD;;GAAMX,I;;KAAAA,I;AA4GN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'\n\n// Componenents\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\n// REST API endpoints to Python ML server\nconst apikey = \"c55f8d138f6ccfd43612b15c98706943e1f4bea3\";\nconst urlNB = `/api/predict/NB&apikey=${apikey}`;\nconst urlDNN = `/api/predict/DNN&apikey=${apikey}`;\n\nconst Chat = ({ location }) => {\n  // ----------------------------------- Initialization -----------------------------------\n  // TODO: Create a array of different thinking responses and score responses\n  //       bots should randomly select from this array for variation\n  // Init bots\n  let NB = {\n    name: \"Naive Bayes Bot\", score: -1, \n    thinking: \"Let me think about that . . .\",\n    scoreMsg: \"Here's what I think about the sentiment score for your message: \"\n  }\n  let DNN = {\n    name: \"DNN Bot\", score: -1,\n    thinking: \"Give me a second . . .\",\n    scoreMsg: \"I give your message a sentiment score of: \"\n  }\n\n  // Read name from URL on init\n  const name = window.location.search.split('=')[1];                          \n  const [users, setUsers] = useState([\n    { name: name }, { name: NB.name }, { name: DNN.name }\n  ]);\n\n  // Stateful message rendering\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // Request headers for API call to ML server for predictions\n  let params = {\n    method: \"POST\",  \n    headers: { \"Content-type\": \"application/json\" },  \n    body: JSON.stringify({ \"Message\" : message })\n  }\n\n  // ----------------------------------- Messaging Functions -----------------------------------\n  // Render the message to screen\n  const sendMessage = (name, msg) => {\n    let currMsg = { user: name, text: msg};\n    setMessages(prevMsgs => ([ ...prevMsgs, currMsg ]));    \n  }\n\n  // Generate a random delay between messages the bots send\n  const getDelay = () => { return Math.floor(Math.random() * (1100 - 1500) ) + 1500;}\n\n  // Retrieve NB sentiment prediction from server for the user sent text\n  const getScoreNB = async () => {\n    await(                                                                                                     \n      fetch(urlNB, params)\n      .then((response) => response.json())\n      .then((scoreData) => { NB.score = scoreData.Score})\n    ) .catch((err) => { console.log(err); }); \n  }\n  // Retrieve DNN sentiment prediction from server for the user sent text\n  const getScoreDNN = async() => {\n    await(\n      fetch(urlDNN, params)\n      .then((response) => response.json())\n      .then((scoreData) => { DNN.score = scoreData.Score})\n    ) .catch((err) => { console.log(err); });\n  }\n\n  const respondNB = async (userMsg) => {\n    // await(setTimeout(function() { sendMessage(NB.name, NB.thinking) }, getDelay()));            // Send thinking message\n    // await(sendMessage(NB.name, \"You sent: \" + userMsg));\n    // // getScoreNB()                                                                      // Retrieve the NB sentiment score\n    // await(sendMessage(NB.name, NB.scoreMsg + NB.score));\n  }\n\n  const respondDNN = (userMsg) => {\n    // Send thinking message\n    let thinkDelay = getDelay();\n    let repeatDelay = thinkDelay + getDelay();\n    let scoreDelay = repeatDelay + getDelay();\n    setTimeout(function() { sendMessage(DNN.name, DNN.thinking) }, thinkDelay);  \n    setTimeout(function() { sendMessage(DNN.name, \"You sent: \" + userMsg) }, repeatDelay);\n    setTimeout(function() { sendMessage(DNN.name, DNN.scoreMsg + DNN.score) }, scoreDelay);\n\n  }\n\n  const handleMessage = (event) => {\n    event.preventDefault();\n    // Render user message\n    let userMsg = message;\n    sendMessage(name, message)\n    setMessage('');\n\n    // Randomly alternate which bot responds to the message first\n    if(Math.random() < 0.5){\n      respondNB(userMsg);\n      setTimeout(function() { respondDNN() }, getDelay());  \n    }\n    else{\n      respondDNN(userMsg);\n      setTimeout(function() { respondNB() }, getDelay());  \n    }\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room=\"SA Chat\"/>\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={handleMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}