{"ast":null,"code":"var _jsxFileName = \"/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'; // Componenents\n\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport './Chat.css'; // REST API endpoints to Python ML server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"c55f8d138f6ccfd43612b15c98706943e1f4bea3\";\nconst urlNB = `/api/predict/NB&apikey=${apikey}`;\nconst urlDNN = `/api/predict/DNN&apikey=${apikey}`;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  // ----------------------------------- Initialization -----------------------------------\n  // TODO: Create a array of different thinking responses and score responses\n  //       bots should randomly select from this array for variation\n  // Init bots\n  let NB = {\n    name: \"Naive Bayes Bot\",\n    score: null,\n    thinking: \"Let me think about that . . .\",\n    scoreMsg: \"Here's what I think about the sentiment score for your message: \"\n  };\n  let DNN = {\n    name: \"DNN Bot\",\n    score: null,\n    thinking: \"Give me a second . . .\",\n    scoreMsg: \"I give your message a sentiment score of: \"\n  }; // Read name from URL on init\n\n  const humanUser = window.location.search.split('=')[1];\n  const [users, setUsers] = useState([{\n    name: humanUser\n  }, {\n    name: NB.name\n  }, {\n    name: DNN.name\n  }]); // Stateful message rendering\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]); // Display intro message\n\n  sendMessage(\"Admin\", `Welcome to sentiment analyzer ${humanUser}`);\n  setTimeout(function () {\n    sendMessage(\"Admin\", `Send a message and ${NB.name} and ${DNN.name} will try to predict \n    the sentiment of your message with a score from 0 (most negative) to 4 (most positive)`);\n  }, getDelay()); // Request headers for API call to ML server for predictions\n\n  let params = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"Message\": message\n    })\n  }; // ----------------------------------- Messaging Functions -----------------------------------\n  // Render the message to screen\n\n  const sendMessage = (name, msg) => {\n    let currMsg = {\n      user: name,\n      text: msg\n    };\n    setMessages(prevMsgs => [...prevMsgs, currMsg]);\n  }; // Generate a random delay between messages the bots send\n\n\n  const getDelay = () => {\n    return Math.floor(Math.random() * (1100 - 1500)) + 1500;\n  }; // Retrieve NB sentiment prediction from server for the user sent text\n\n\n  const getScoreNB = async () => {\n    await fetch(urlNB, params).then(response => response.json()).then(scoreData => {\n      NB.score = scoreData.Score;\n    }).catch(err => {\n      console.log(err);\n    });\n    NB.score = -1;\n  }; // Retrieve DNN sentiment prediction from server for the user sent text\n\n\n  const getScoreDNN = async () => {\n    // await(\n    //   fetch(urlDNN, params)\n    //   .then((response) => response.json())\n    //   .then((scoreData) => { DNN.score = scoreData.Score})\n    // ) .catch((err) => { console.log(err); });\n    DNN.score = -1;\n  };\n\n  const respondNB = async (userMsg, callback) => {\n    let thinkDelay = getDelay();\n    let repeatDelay = thinkDelay + getDelay();\n    let scoreDelay = repeatDelay + getDelay();\n    setTimeout(function () {\n      sendMessage(NB.name, NB.thinking);\n    }, thinkDelay); // Send thinking message\n\n    setTimeout(function () {\n      sendMessage(NB.name, NB.scoreMsg + NB.score);\n    }, scoreDelay); // Send user the sentiment score\n\n    getScoreNB();\n    if (callback) setTimeout(function () {\n      callback(userMsg, function () {});\n    }, thinkDelay); // Call the other bot if not yet called                                 \n  };\n\n  const respondDNN = async (userMsg, callback) => {\n    let thinkDelay = getDelay();\n    let repeatDelay = thinkDelay + getDelay();\n    let scoreDelay = repeatDelay + getDelay();\n    setTimeout(function () {\n      sendMessage(DNN.name, DNN.thinking);\n    }, thinkDelay); // Send thinking message\n\n    setTimeout(function () {\n      sendMessage(DNN.name, DNN.scoreMsg + DNN.score);\n    }, scoreDelay); // Send user the sentiment score\n\n    getScoreDNN();\n    if (callback) setTimeout(function () {\n      callback(userMsg, function () {});\n    }, thinkDelay); // Call the other bot if not yet called                                 \n  };\n\n  const handleMessage = async event => {\n    event.preventDefault(); // Render user message\n\n    let userMsg = message;\n    sendMessage(humanUser, message);\n    setMessage(''); // Randomly alternate which bot responds to the message first\n\n    if (Math.random() < 0.5) {\n      respondNB(userMsg, respondDNN);\n    } else {\n      respondDNN(userMsg, respondNB);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: \"SA Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: humanUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: handleMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"Wmp9NEJWQWh/HuoBnjzRh3ynWt8=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","useHistory","useParams","TextContainer","Messages","InfoBar","Input","apikey","urlNB","urlDNN","Chat","location","NB","name","score","thinking","scoreMsg","DNN","humanUser","window","search","split","users","setUsers","message","setMessage","messages","setMessages","sendMessage","setTimeout","getDelay","params","method","headers","body","JSON","stringify","msg","currMsg","user","text","prevMsgs","Math","floor","random","getScoreNB","fetch","then","response","json","scoreData","Score","catch","err","console","log","getScoreDNN","respondNB","userMsg","callback","thinkDelay","repeatDelay","scoreDelay","respondDNN","handleMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'\n\n// Componenents\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\n// REST API endpoints to Python ML server\nconst apikey = \"c55f8d138f6ccfd43612b15c98706943e1f4bea3\";\nconst urlNB = `/api/predict/NB&apikey=${apikey}`;\nconst urlDNN = `/api/predict/DNN&apikey=${apikey}`;\n\nconst Chat = ({ location }) => {\n  // ----------------------------------- Initialization -----------------------------------\n  // TODO: Create a array of different thinking responses and score responses\n  //       bots should randomly select from this array for variation\n  // Init bots\n  let NB = {\n    name: \"Naive Bayes Bot\", score: null, \n    thinking: \"Let me think about that . . .\",\n    scoreMsg: \"Here's what I think about the sentiment score for your message: \"\n  }\n  let DNN = {\n    name: \"DNN Bot\", score: null,\n    thinking: \"Give me a second . . .\",\n    scoreMsg: \"I give your message a sentiment score of: \"\n  }\n\n  // Read name from URL on init\n  const humanUser = window.location.search.split('=')[1];                          \n  const [users, setUsers] = useState([\n    { name: humanUser }, { name: NB.name }, { name: DNN.name }\n  ]);\n\n  // Stateful message rendering\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // Display intro message\n  sendMessage(\"Admin\", `Welcome to sentiment analyzer ${humanUser}`)\n  setTimeout(function() { \n    sendMessage(\"Admin\", `Send a message and ${NB.name} and ${DNN.name} will try to predict \n    the sentiment of your message with a score from 0 (most negative) to 4 (most positive)`) \n  }, getDelay());    \n\n  // Request headers for API call to ML server for predictions\n  let params = {\n    method: \"POST\",  \n    headers: { \"Content-type\": \"application/json\" },  \n    body: JSON.stringify({ \"Message\" : message })\n  }\n\n  // ----------------------------------- Messaging Functions -----------------------------------\n  // Render the message to screen\n  const sendMessage = (name, msg) => {\n    let currMsg = { user: name, text: msg};\n    setMessages(prevMsgs => ([ ...prevMsgs, currMsg ]));    \n  }\n\n  // Generate a random delay between messages the bots send\n  const getDelay = () => { return Math.floor(Math.random() * (1100 - 1500) ) + 1500;}\n\n  // Retrieve NB sentiment prediction from server for the user sent text\n  const getScoreNB = async () => {\n    await(                                                                                                     \n      fetch(urlNB, params)\n      .then((response) => response.json())\n      .then((scoreData) => { NB.score = scoreData.Score})\n    ) .catch((err) => { console.log(err); }); \n    NB.score = -1;\n  }\n  // Retrieve DNN sentiment prediction from server for the user sent text\n  const getScoreDNN = async() => {\n    // await(\n    //   fetch(urlDNN, params)\n    //   .then((response) => response.json())\n    //   .then((scoreData) => { DNN.score = scoreData.Score})\n    // ) .catch((err) => { console.log(err); });\n    DNN.score = -1;\n  }\n\n  const respondNB = async (userMsg, callback) => {\n    let thinkDelay = getDelay();\n    let repeatDelay = thinkDelay + getDelay();\n    let scoreDelay = repeatDelay + getDelay();\n    setTimeout(function() { sendMessage(NB.name, NB.thinking) }, thinkDelay);               // Send thinking message\n    setTimeout(function() { sendMessage(NB.name, NB.scoreMsg + NB.score) }, scoreDelay);    // Send user the sentiment score\n    getScoreNB();\n    if(callback)\n      setTimeout(function() { callback(userMsg, function(){}) }, thinkDelay);               // Call the other bot if not yet called                                 \n  }\n\n  const respondDNN = async (userMsg, callback) => {\n    let thinkDelay = getDelay();\n    let repeatDelay = thinkDelay + getDelay();\n    let scoreDelay = repeatDelay + getDelay();\n    setTimeout(function() { sendMessage(DNN.name, DNN.thinking) }, thinkDelay);             // Send thinking message\n    setTimeout(function() { sendMessage(DNN.name, DNN.scoreMsg + DNN.score) }, scoreDelay); // Send user the sentiment score\n    getScoreDNN();\n    if(callback)\n      setTimeout(function() { callback(userMsg, function(){}) }, thinkDelay);               // Call the other bot if not yet called                                 \n  }\n\n  const handleMessage = async (event) => {\n    event.preventDefault();\n    // Render user message\n    let userMsg = message;\n    sendMessage(humanUser, message)\n    setMessage('');\n\n    // Randomly alternate which bot responds to the message first\n    if(Math.random() < 0.5){\n      respondNB(userMsg, respondDNN)\n    }\n    else{\n      respondDNN(userMsg, respondNB);\n    }\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room=\"SA Chat\"/>\n          <Messages messages={messages} name={humanUser} />\n          <Input message={message} setMessage={setMessage} sendMessage={handleMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}