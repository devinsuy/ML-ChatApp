{"ast":null,"code":"var _jsxFileName = \"/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'; // Componenents\n\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport './Chat.css'; // REST API endpoints to Python ML server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apikey = \"c55f8d138f6ccfd43612b15c98706943e1f4bea3\";\nconst urlNB = `/api/predict/NB&apikey=${apikey}`;\nconst urlDNN = `/api/predict/DNN&apikey=${apikey}`;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  // Init bots\n  let NB = {\n    Name: \"Naive Bayes Bot\",\n    score: -1\n  };\n  let DNN = {\n    Name: \"DNN Bot\",\n    score: -1\n  }; // Read name from URL on init\n\n  const name = window.location.search.split('=')[1];\n  const [users, setUsers] = useState([{\n    name: name\n  }, {\n    name: NB.name\n  }, {\n    name: DNN.name\n  }]); // Stateful message rendering\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = event => {\n    event.preventDefault(); // TODO: Implement Python REST api\n    // await(\n    //   fetch(urlDNN, params)\n    //   .then((response) => response.json())\n    //   .then((scoreData) => { DNN.score = scoreData.Score})\n    // ) .catch((err) => { console.log(err); }); \n    // Render user entered message\n\n    setMessages([...messages, {\n      text: message,\n      user: name\n    }]); // Request headers for API call to ML server for prediction\n\n    let params = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"Message\": message\n      })\n    };\n    console.log(messages); // NB Bot will take short pause before redering thinking message\n\n    setTimeout(function () {\n      setMessages([{\n        text: \"Let me think about that . . .\",\n        user: \"Naive Bayes Bot\"\n      }, ...messages]);\n    }, 1000);\n    console.log(messages); // Retrieve NB sentiment prediction from server\n    // await(                                                                                                     \n    //   fetch(urlNB, params)\n    //   .then((response) => response.json())\n    //   .then((scoreData) => { NB.score = scoreData.Score})\n    // ) .catch((err) => { console.log(err); }); \n    // Render NB prediction\n    // setMessages([ ...messages, { text: `Here's what I think about your message: ${NB.score}`, user: NB.name }])     \n  };\n\n  function respond() {\n    console.log(\"MADE IT TO RESPOND -------------\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: \"SA Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage.then(respond),\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"hhHQ4lPi3OQgDOWgIR/Yk38Pjv8=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","useHistory","useParams","TextContainer","Messages","InfoBar","Input","apikey","urlNB","urlDNN","Chat","location","NB","Name","score","DNN","name","window","search","split","users","setUsers","message","setMessage","messages","setMessages","sendMessage","event","preventDefault","text","user","params","method","headers","body","JSON","stringify","console","log","setTimeout","respond","then"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom'\n\n// Componenents\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\n// REST API endpoints to Python ML server\nconst apikey = \"c55f8d138f6ccfd43612b15c98706943e1f4bea3\";\nconst urlNB = `/api/predict/NB&apikey=${apikey}`;\nconst urlDNN = `/api/predict/DNN&apikey=${apikey}`;\n\nconst Chat = ({ location }) => {\n  // Init bots\n  let NB = {\n    Name : \"Naive Bayes Bot\", score: -1\n  }\n  let DNN = {\n    Name: \"DNN Bot\", score: -1\n  }\n\n  // Read name from URL on init\n  const name = window.location.search.split('=')[1];                          \n  const [users, setUsers] = useState([\n    { name: name }, { name: NB.name }, { name: DNN.name }\n  ]);\n\n  // Stateful message rendering\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n\n\n    // TODO: Implement Python REST api\n\n    // await(\n    //   fetch(urlDNN, params)\n    //   .then((response) => response.json())\n    //   .then((scoreData) => { DNN.score = scoreData.Score})\n    // ) .catch((err) => { console.log(err); }); \n\n    // Render user entered message\n    setMessages([ ...messages, { text: message, user: name } ]);                      \n\n    // Request headers for API call to ML server for prediction\n    let params = {\n      method: \"POST\",  \n      headers: { \"Content-type\": \"application/json\" },  \n      body: JSON.stringify({ \"Message\" : message })\n    }\n    console.log(messages)\n    // NB Bot will take short pause before redering thinking message\n    setTimeout(function() {                                                           \n      setMessages([ { text: \"Let me think about that . . .\", user: \"Naive Bayes Bot\" }, ...messages ]); \n    }, 1000);                      \n    console.log(messages)\n\n    // Retrieve NB sentiment prediction from server\n    // await(                                                                                                     \n    //   fetch(urlNB, params)\n    //   .then((response) => response.json())\n    //   .then((scoreData) => { NB.score = scoreData.Score})\n    // ) .catch((err) => { console.log(err); }); \n\n    // Render NB prediction\n    // setMessages([ ...messages, { text: `Here's what I think about your message: ${NB.score}`, user: NB.name }])     \n\n  }\n\n  function respond(){\n    console.log(\"MADE IT TO RESPOND -------------\")\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room=\"SA Chat\"/>\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage.then(respond)} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}