{"ast":null,"code":"import _slicedToArray from\"/Users/devin/GitHub/ML-ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";// Componenents\nimport TextContainer from'../TextContainer/TextContainer';import Messages from'../Messages/Messages';import InfoBar from'../InfoBar/InfoBar';import Input from'../Input/Input';import'./Chat.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chat=function Chat(_ref){var location=_ref.location;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),room=_useState4[0],setRoom=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),users=_useState6[0],setUsers=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),message=_useState8[0],setMessage=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),messages=_useState10[0],setMessages=_useState10[1];var sendMessage=function sendMessage(event){event.preventDefault();console.log(message);};// Check the users list to see if the bots have been added yet\nvar usersArr=Array.from(users);var foundDNN=usersArr.some(function(el){return el.name===\"DNN Bot\";});var foundNB=usersArr.some(function(el){return el.name===\"Naive Bayes Bot\";});// Add the bots only if they havent been added previously and there is atleast 1 user in the room\nif(!foundNB&&usersArr.length>0)users.push({id:usersArr[0].id,name:\"Naive Bayes Bot\",room:users[0].room});if(!foundDNN&&usersArr.length>0)users.push({id:usersArr[0].id,name:\"DNN Bot\",room:users[0].room});return/*#__PURE__*/_jsxs(\"div\",{className:\"outerContainer\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(InfoBar,{room:room}),/*#__PURE__*/_jsx(Messages,{messages:messages,name:name}),/*#__PURE__*/_jsx(Input,{message:message,setMessage:setMessage,sendMessage:sendMessage})]}),/*#__PURE__*/_jsx(TextContainer,{users:users})]});};export default Chat;","map":{"version":3,"sources":["/Users/devin/GitHub/ML-ChatApp/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","TextContainer","Messages","InfoBar","Input","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","sendMessage","event","preventDefault","console","log","usersArr","Array","from","foundDNN","some","el","foundNB","length","push","id"],"mappings":"qJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA;AACA,MAAOC,CAAAA,aAAP,KAA0B,gCAA1B,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CAEA,MAAO,YAAP,C,wFAGA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACLP,QAAQ,CAAC,EAAD,CADH,wCACtBQ,IADsB,eAChBC,OADgB,8BAELT,QAAQ,CAAC,EAAD,CAFH,yCAEtBU,IAFsB,eAEhBC,OAFgB,8BAGHX,QAAQ,CAAC,EAAD,CAHL,yCAGtBY,KAHsB,eAGfC,QAHe,8BAICb,QAAQ,CAAC,EAAD,CAJT,yCAItBc,OAJsB,eAIbC,UAJa,8BAKGf,QAAQ,CAAC,EAAD,CALX,0CAKtBgB,QALsB,gBAKZC,WALY,gBAO7B,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7BA,KAAK,CAACC,cAAN,GACAC,OAAO,CAACC,GAAR,CAAYR,OAAZ,EACD,CAHD,CAKA;AACA,GAAMS,CAAAA,QAAQ,CAAGC,KAAK,CAACC,IAAN,CAAWb,KAAX,CAAjB,CACA,GAAMc,CAAAA,QAAQ,CAAGH,QAAQ,CAACI,IAAT,CAAc,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACpB,IAAH,GAAY,SAAhB,EAAhB,CAAjB,CACA,GAAMqB,CAAAA,OAAO,CAAGN,QAAQ,CAACI,IAAT,CAAc,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACpB,IAAH,GAAY,iBAAhB,EAAhB,CAAhB,CAEA;AACA,GAAG,CAACqB,OAAD,EAAYN,QAAQ,CAACO,MAAT,CAAkB,CAAjC,CACElB,KAAK,CAACmB,IAAN,CAAW,CAACC,EAAE,CAAET,QAAQ,CAAC,CAAD,CAAR,CAAYS,EAAjB,CAAqBxB,IAAI,CAAE,iBAA3B,CAA8CE,IAAI,CAAEE,KAAK,CAAC,CAAD,CAAL,CAASF,IAA7D,CAAX,EACF,GAAG,CAACgB,QAAD,EAAaH,QAAQ,CAACO,MAAT,CAAkB,CAAlC,CACElB,KAAK,CAACmB,IAAN,CAAW,CAACC,EAAE,CAAET,QAAQ,CAAC,CAAD,CAAR,CAAYS,EAAjB,CAAqBxB,IAAI,CAAE,SAA3B,CAAsCE,IAAI,CAAEE,KAAK,CAAC,CAAD,CAAL,CAASF,IAArD,CAAX,EAGF,mBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,aAAK,SAAS,CAAC,WAAf,wBACI,KAAC,OAAD,EAAS,IAAI,CAAEA,IAAf,EADJ,cAEI,KAAC,QAAD,EAAU,QAAQ,CAAEM,QAApB,CAA8B,IAAI,CAAER,IAApC,EAFJ,cAGI,KAAC,KAAD,EAAO,OAAO,CAAEM,OAAhB,CAAyB,UAAU,CAAEC,UAArC,CAAiD,WAAW,CAAEG,WAA9D,EAHJ,GADF,cAME,KAAC,aAAD,EAAe,KAAK,CAAEN,KAAtB,EANF,GADF,CAUD,CAlCD,CAoCA,cAAeN,CAAAA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// Componenents\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    console.log(message)\n  }\n\n  // Check the users list to see if the bots have been added yet\n  const usersArr = Array.from(users)\n  const foundDNN = usersArr.some(el => el.name === \"DNN Bot\");\n  const foundNB = usersArr.some(el => el.name === \"Naive Bayes Bot\");\n  \n  // Add the bots only if they havent been added previously and there is atleast 1 user in the room\n  if(!foundNB && usersArr.length > 0)\n    users.push({id: usersArr[0].id, name: \"Naive Bayes Bot\", room: users[0].room})\n  if(!foundDNN && usersArr.length > 0)\n    users.push({id: usersArr[0].id, name: \"DNN Bot\", room: users[0].room})\n\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}